from Crypto.Util.number import *

ct = int('9368dbd7fae234379936740472c7760e530e4ec4d63fdb9ac82a0a82616e66d2c29781eda6d5180ef2b2b102803a6c530de7d05603355d8a8576d3c80d456630b2a6acddff25b173d4d5b247c7bb2ce',16)
e = 65537

leak = 257076856982773809495442123061269350631
a = 1941448607533067675328832076705049301352
b = 2870845670782535789908644145000607723205
c = 1806929220139678702523827305424872187718
N = 340247709090788304905778525976558866456572030191875402794875528785803876847548222269479290754399338426772226533090039700753078571574911919091692001399444782529993968387543099470641034289451937

s = leak # Euler's theorem

'''
Solve a system of equations with 3 variables
upon solving to find q, you can arrive on this equation:

q = (2a + 2c - 2b)/10

rest of the variables can be derived from either sub-equations or the given equations.
'''

q = (2*a + 2*c - 2*b)//10
p = (3*a + 2*b - 31*q)//29
r = (c - (2*p + 3*q))//5

t = N//(p*q*r*s)
assert isPrime(p) and isPrime(q) and isPrime(r) and isPrime(s)

phi = (p-1)*(q-1)*(r-1)*(s-1)*(t-1)
d = pow(e,-1,phi)

flag = long_to_bytes(pow(ct,d,N)).decode()
print(flag)